{# Metadata #} 
{# This should be compatible for Llama 3.1, 3.2, and 3.3 https://www.llama.com/docs/model-cards-and-prompt-formats/llama3_3/ #}
{#
stop_strings are the tags that signal that the generation is complete
Ex in llama 3.1, we can find the generation_config and see that 128000, 128001, 128008, 128009 should be the stop tokens
{which are "<|begin_of_text|>", "<|end_of_text|>", "<|eom_id|>", and "<|eot_id|>"
#}
{%- set bos_token = "<|begin_of_text|>" -%}
{%- set stop_strings = ["<|end_of_text|>", "<|eot_id|>", "<|eom_id|>"] -%}
{# Define the possible message roles #}
{%- set message_roles = ['system', 'user', 'assistant', 'tool', 'ipython'] -%}
{# Define the start identifier for the tool
This lets us know when we should start parsing output as a tool call, and is sometimes unique to the model
For Example: Grok tool calling: https://huggingface.co/Groq/Llama-3-Groq-70B-Tool-Use will place tool calls between <tool_call> and </tool_call> tags
Grok Example:
<tool_call>
    {"name": <function-name>,"arguments": <args-dict>}
</tool_call>
So we would set tool_start = "<tool_call>" and tool_end = "</tool_call>"

Another Example is:
Llama3 FireFunctionV2's](https://huggingface.co/fireworks-ai/llama-3-firefunction-v2) model expects only `functools` to start the call, without a `tool_end`
#}
{%- set tool_start = "<|tool_start|>" -%}
{%- set tool_end = "<|tool_end|>" -%}
{#
start_header and end_header signify the start and ending strings that surround the "role".
Here are examples for llama 3.1
EX: <|start_header_id|>system<|end_header_id|>
EX: <|start_header_id|>user<|end_header_id|>
#}
{%- set start_header = "<|start_header_id|>" -%}
{%- set end_header = "<|end_header_id|>" -%}
{%- set tool_system_prompt = 'You are an expert in composing functions. You are given a question and a set of possible functions.
Based on the question, you will need to make one or more function/tool calls to achieve the purpose.
If none of the functions can be used, point it out. If the given question lacks the parameters required by the function, also point it out. You should only return the function call in tools call sections.' -%}
{%- set tool_format_prompt = 'If you decide to invoke any of the function(s), you MUST put it in the format of ' + tool_start + '[{"function": {"name": func_name1, "arguments": {"params_name_1": params_value1 "params_name2": params_value2,...}}, "type": "function", "id": "tool_id_123"}, {func_definition2}]' + tool_end + '
You SHOULD NOT include any other text in the response.
You MUST include the `' + tool_start + '` and `' + tool_end + '` tags around the function calls.' -%}
{%- if tools_json is defined %}
    {%- set tools = tools_json %}
{%- elif custom_tools is defined %}
    {%- set tools = custom_tools %}
{%- endif %}
{%- if not tools_in_user_message  is defined %}
    {# {%- set tools_in_user_message = true %} #}
    {%- set tools_in_user_message = false %}
{%- endif %}
{%- if not date_string is defined %}
    {%- set date_string = "26 Jul 2024" %}
{%- endif %}
{%- if not tools is defined %}
    {%- set tools = none %}
{%- endif %}
{# Template #}
{%- set tool_reminder = tool_format_prompt + '\n\nHere is a list of functions in JSON format that you can invoke.\n\n' + tools + '\n\n' -%}
{{- bos_token }}
{#
{%- if custom_tools is defined %}
    {%- set tools = custom_tools %}
{%- endif %}
#}
{# TabbyAPI defines the tool definitions as the tools_json template parameter #}
{#- This block extracts the system message, so we can slot it into the right place. #}
{%- if messages[0]['role'] == 'system' %}
    {%- set system_message = messages[0]['content']|trim %}
    {%- set messages = messages[1:] %}
{%- else %}
    {%- set system_message = "" %}
{%- endif %}

{#- System message + builtin tools #}
{{- start_header + 'system' + start_header + '\n' }}
{# It seems like the website says dont use "Environment: ipython\n" for custom tool format #}
{#
{%- if builtin_tools is defined or tools is not none %}
    {{- "Environment: ipython\n" }}
{%- endif %}
{%- if builtin_tools is defined %}
    {{- "Tools: " + builtin_tools | reject('equalto', 'code_interpreter') | join(", ") + "\n\n"}}
{%- endif %}
#}
{{- "Cutting Knowledge Date: December 2023\n" }}
{{- "Today Date: " + date_string + "\n\n" }}
{%- if tools is not none and not tools_in_user_message %}
    {{- tool_system_prompt + '\n\n' -}}
    {{- system_message + '\n\n' -}}
    {{- tool_format_prompt  + '\n\n' -}}
    {{- 'Here is a list of functions in JSON format that you can invoke.\n\n' -}}
    {{- tools -}}
    {#
    {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
    {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
    {{- "Do not use variables.\n\n" }}
    {%- for t in tools %}
        {{- t | tojson(indent=4) }}
        {{- "\n\n" }}
    {%- endfor %}
    #}
{%- else -%}
{{- system_message }}
{%- endif %}
{# {{- system_message }} #}
{{- "<|eot_id|>" }}

{#- Custom tools are passed in a user message with some extra guidance #}
{%- if tools_in_user_message and not tools is none %}
    {#- Extract the first user message so we can plug it in here #}
    {%- if messages | length != 0 %}
        {%- set first_user_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
    {{- start_header + 'user' + end_header + '\n\n' -}}
    {{- tool_system_prompt + '\n\n' -}}
    {{- tool_format_prompt  + '\n\n' -}}
    {{- 'Here is a list of functions in JSON format that you can invoke.\n\n' -}}
    {{- tools -}}
    {#
    {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
    {{- "Given the following functions, please respond with a JSON for a function call " }}
    {{- "with its proper arguments that best answers the given prompt.\n\n" }}
    {{- 'Respond in the format {"name": function name, "parameters": dictionary of argument name and its value}.' }}
    {{- "Do not use variables.\n\n" }}
    {%- for t in tools %}
        {{- t | tojson(indent=4) }}
        {{- "\n\n" }}
    {%- endfor %}
    #}
    {{- first_user_message + "<|eot_id|>"}}
{%- endif %}

{%- for message in messages %}
    {%- if not (message.role == 'ipython' or message.role == 'tool' or message.tool_calls) %}
        {{- start_header + message['role'] + end_header + '\n\n'+ message['content'] | trim + '<|eot_id|>' }}
    {%- elif message.tool_calls %}
        {#
        {%- if not message.tool_calls|length == 1 %}
            {{- raise_exception("This model only supports single tool-calls at once!") }}
        {%- endif %}
        {%- set tool_call = message.tool_calls[0].function %}
        {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {{- "<|python_tag|>" + tool_call.name + ".call(" }}
            {%- for arg_name, arg_val in tool_call.arguments | items %}
                {{- arg_name + '="' + arg_val + '"' }}
                {%- if not loop.last %}
                    {{- ", " }}
                {%- endif %}
                {%- endfor %}
            {{- ")" }}
        {%- else  %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {{- '{"name": "' + tool_call.name + '", ' }}
            {{- '"parameters": ' }}
            {{- tool_call.arguments | tojson }}
            {{- "}" }}
        {%- endif %}
        #}
        {{- start_header + 'assistant' + end_header + '\n\n' -}}
        {{- '[' -}}
        {%- for tool_call in message.tool_calls -%}
            {{ tool_call.model_dump() | tojson }}
            {%- if not loop.last %}, {% endif %}
        {%- endfor -%}
        {{- ']' -}}
        {%- if builtin_tools is defined %}
            {#- This means we're in ipython mode #}
            {{- "<|eom_id|>" }}
        {%- else %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- elif message.role == "tool" or message.role == "ipython" %}
        {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
        {%- if message.content is mapping or message.content is iterable %}
            {{- message.content | tojson }}
        {%- else %}
            {{- message.content }}
        {%- endif %}
        {{- "<|eot_id|>" }}
    {%- endif %}
{%- endfor %}
{#
{%- if add_generation_prompt %}
    {{- start_header + 'assistant' + end_header + '\n\n' }}
{%- endif %}
#}
{%- if tool_precursor -%}
    {{ start_header }}system{{ end_header }}
    {{ tool_reminder }}{{ eos_token }}
    {{ start_header }}assistant{{ end_header }}
    {{ tool_precursor }}{{ tool_start }}
{%- else -%}
    {{- start_header + 'assistant' + end_header + '\n\n' }}
{%- endif -%}